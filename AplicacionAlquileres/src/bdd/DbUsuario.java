// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package bdd;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import modelo.Cliente;
import modelo.Usuario;


/************************************************************/
/**
 * 
 */
//--------------------------------------------------------
//Code generated by Papyrus Java
//--------------------------------------------------------

import java.sql.PreparedStatement;
import java.sql.SQLException;

import modelo.Usuario;

public class DbUsuario extends Conexion{
	public DbUsuario() throws SQLException {
		super();
	}
		
	public boolean crearUsuario(Usuario usuario) {
		String sql = "INSERT INTO usuario (dni, nombre, telef, correo, direccion, contrasea, rol) VALUES (?, ?, ?, ?, ?, ?, ?)";	

     try (PreparedStatement stmt = conexion.prepareStatement(sql)) {
         stmt.setString(1, usuario.getNombre());
         stmt.setString(2, usuario.getDNI());
         stmt.setString(3, usuario.getDireccion());
         stmt.setString(4, usuario.getTfno());
         stmt.setString(5, usuario.getCorreo());
         stmt.setString(6, usuario.getContrasea());
         stmt.setInt(7, usuario.getRol());
         int filas = stmt.executeUpdate();
         return filas > 0;
     } catch (SQLException e) {
         e.printStackTrace();
         return false;
     	}

	}
	/**
	 * 
	 */
	public ArrayList<Usuario> verTodosUsuario() {
		ArrayList<Usuario> listaUsuario = new ArrayList<>();
	    String sql = "SELECT dni, nombre, telef, correo, direccion FROM usuario WHERE rol = 2";
	    
	    try (PreparedStatement stmt = conexion.prepareStatement(sql);
	         ResultSet rs = stmt.executeQuery()) {
	        
	        while (rs.next()) {
	            String dniUsuario = rs.getString("dni");
	            String nombre = rs.getString("nombre");
	            String telef = rs.getString("telef");
	            String correo = rs.getString("correo");
	            String direccion = rs.getString("direccion");
	            
	            Usuario usuario = new Usuario(dniUsuario, nombre, telef, correo, direccion, direccion, 2);
	            listaUsuario.add(usuario);
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    
	    return listaUsuario;
	}
	
	public boolean actualizarUsuario(Usuario usuario) {
	    String sql = "UPDATE usuario SET nombre=?, correo=?, telef=?, direccion=? WHERE dni=? AND rol=1";

	    try (PreparedStatement stmt = conexion.prepareStatement(sql)) {
	        stmt.setString(1, usuario.getNombre());
	        stmt.setString(2, usuario.getCorreo());
	        stmt.setString(3, usuario.getTfno());
	        stmt.setString(4, usuario.getDireccion());
	        stmt.setString(5, usuario.getDNI());
	        
	        int filas = stmt.executeUpdate();
	        return filas > 0; // Devuelve true si se actualizó
	    } catch (SQLException e) {
	        e.printStackTrace();
	        return false;
	    }
	}

	public boolean eliminarUsuario(String dni) {
	    String sql = "DELETE FROM usuario WHERE dni = ? AND rol = 2";

	    try (PreparedStatement stmt = conexion.prepareStatement(sql)) {
	        stmt.setString(1, dni);
	        int filas = stmt.executeUpdate();
	        return filas > 0; // Devuelve true si se eliminó al menos 1 fila
	    } catch (SQLException e) {
	        e.printStackTrace();
	        return false;
	    }
	}
}


